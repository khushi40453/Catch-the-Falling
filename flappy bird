<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Bird</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            background-color: #70c5ce;
        }

        canvas {
            display: block;
            margin: 0 auto;
        }

        #gameOver {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 20px;
            border-radius: 10px;
        }

        #gameOver button {
            background: #ff9800;
            border: none;
            color: white;
            padding: 10px 20px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="gameOver">
        <h1>Game Over</h1>
        <p>Score: <span id="finalScore"></span></p>
        <button onclick="restartGame()">Restart</button>
    </div>
    <canvas id="gameCanvas"></canvas>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const bird = {
            x: 50,
            y: canvas.height / 2,
            size: 20,
            gravity: 1.5,
            lift: -20,
            velocity: 0,
        };

        const pipes = [];
        const pipeWidth = 50;
        const pipeGap = 200;
        let pipeSpawnTimer = 0;

        let score = 0;
        let gameRunning = true;

        function drawBird() {
            ctx.fillStyle = 'yellow';
            ctx.beginPath();
            ctx.arc(bird.x, bird.y, bird.size, 0, Math.PI * 2);
            ctx.fill();
        }

        function drawPipes() {
            ctx.fillStyle = 'green';
            pipes.forEach(pipe => {
                ctx.fillRect(pipe.x, 0, pipeWidth, pipe.top);
                ctx.fillRect(pipe.x, pipe.bottom, pipeWidth, canvas.height - pipe.bottom);
            });
        }

        function updatePipes() {
            pipes.forEach(pipe => {
                pipe.x -= 5;
            });

            if (pipeSpawnTimer === 0) {
                const topHeight = Math.random() * (canvas.height - pipeGap - 100) + 50;
                pipes.push({
                    x: canvas.width,
                    top: topHeight,
                    bottom: topHeight + pipeGap,
                });
                pipeSpawnTimer = 90;
            } else {
                pipeSpawnTimer--;
            }

            pipes.forEach((pipe, index) => {
                if (pipe.x + pipeWidth < 0) {
                    pipes.splice(index, 1);
                    score++;
                }
            });
        }

        function drawScore() {
            ctx.fillStyle = 'white';
            ctx.font = '30px Arial';
            ctx.fillText(`Score: ${score}`, 10, 40);
        }

        function checkCollision() {
            if (bird.y + bird.size >= canvas.height || bird.y - bird.size <= 0) {
                return true;
            }

            return pipes.some(pipe => {
                return (
                    bird.x + bird.size > pipe.x &&
                    bird.x - bird.size < pipe.x + pipeWidth &&
                    (bird.y - bird.size < pipe.top || bird.y + bird.size > pipe.bottom)
                );
            });
        }

        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').innerText = score;
            document.getElementById('gameOver').style.display = 'block';
        }

        function restartGame() {
            document.getElementById('gameOver').style.display = 'none';
            bird.y = canvas.height / 2;
            bird.velocity = 0;
            pipes.length = 0;
            score = 0;
            gameRunning = true;
            animate();
        }

        function animate() {
            if (!gameRunning) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            bird.velocity += bird.gravity;
            bird.y += bird.velocity;

            drawBird();
            updatePipes();
            drawPipes();
            drawScore();

            if (checkCollision()) {
                gameOver();
                return;
            }

            requestAnimationFrame(animate);
        }

        window.addEventListener('keydown', e => {
            if (e.code === 'Space' || e.code === 'ArrowUp') {
                bird.velocity = bird.lift;
            }
        });

        animate();
    </script>
</body>
</html>
